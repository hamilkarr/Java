07-1)배열이란
  
  - 연속적인 자료
  - 같은 자료형의 연속적인 자료
  - 물리적인 연속적인 자료
  - 배열에 선언한 갯수만큼 메모리에 연속적으로 생성

  ex))
  int[] num = new int[4];
  4개의 4byte 공간이 연속적으로 생성

  short[] nums = new short[4];
  4개의 2byte 공간이 연속적으로 생성

  - 배열의 선언과 초기화
    자료형[] 배열이름 = new 자료형[갯수];
    자료형 배열이름[] = new 자료형[갯수];

  - 동일 자료형의 연속된 공간
    int[] nums = new int[4]; ( 4X4 = 16bytes )
    int nums[] = new int[4];

  - 배열 초기화
      배열에 값을 처음 대입
      int[] nums = new int[] { 10, 20, 30, 40}; // 배열   공간이 4개가 생성이 되고, 값이 4개가 대입.

      int[] nums = { 10, 20, 30, 40 } //

  - 배열은 물리적 순서대로 이동
      숫자 순서대로 물리적 이동
      [] -> 인덱스 번호 -> 물리적 위치로 이동(메모리 위치)

  - 배열 속성
      .length -> 배열의 물리적인 갯수

  - 배열에서 가장 많이 사용되는 반복문 for
  - 순서가 정해져 있는 반복문 -> for

  - 배열은 물리적위치와 논리적 위치가 같다.
  - 배열의 length -> 물리적 공간의 갯수, 실제 요소의 갯수 X
  
  - ArrayList 
    -> 지정공간 -> 유동적으로 추가, 삭제, 변경
    -> 실제 요소의 갯수를 체크하는 메서드(.size())

  P206
  char : (나름)정수형

  배열 복사하기
    1) 기존 배열과 동일한 자료형 + 크기를 가진 배열선언을 반복해서 대입하는 방법
    
    2) System.arraycopy
      - src : 원배열
      - srcPos : 원배열의 복사 시점
      - dest : 복사가 될 대상
      - destPos : 복사 시작 위치
      - length : 복사할 요소의 갯수(srcPos 부터 시작)

    객체 배열(참조 자료형 배열)
      1) 얕은 복사
      - System.arraycopy 또는 각 배열의 값을 대입
        -> 인스턴스의 주소만 복사
        -> 원 배열이 가지고 있는 동일한 인스턴스를 가리키고 있다.
        -> 원 배열을 바꾸면 복사된 배열도 변경된 값으로 변한다.
      
      2) 깊은 복사
      - 인스턴스 자체가 새로 생성 및 값이 설정

    향상된 for 
      배열의 

07-2) 다차원 배열 - P219
  차원이 증가할 수록 []가 차원수 만큼 추가
  int[][] = new int[행][열]
  int[][] = new int[2][3]; // 2행 3열 -> 평면적 좌표
  행,열만큼 int 자료형의 빈 공간 -> 초기값 0
  
  초기화
  int[][] nums = new int[][] {{1,2,3},{4,5,6}};
  int[][] nums = {{1,2,3},{4,5,6}};

07-3) ArrayList와 클래스 사용하기
  
  기존 배열의 단점
    공간의 범위를 먼저 선언
      -> 범위를 벗어나는 데이터를 추가
      -> 늘어난 공간을 반영한 새로운 배열을 생성하고, 기존 배열의 데이터를 복사한 후에 추가
      -> 중간에 껴있는 데이터를 삭제
      -> 줄어든 새로운 배열 공간 생성
        : 기존 배열의 앞부분을 잘라서 복사, 뒷부분을 잘라서 복사
      -> 추가, 삭제등이 불편하다.

    내부적으로 배열 공간을 10개 생성
      10개를 넘어가는 시점 -> + 10개를 추가한 새로운 공간

    주로 객체배열 추가, 삭제

    메서드 
      boolean add(E e) -> E 유동적인 자료형
          요소의 추가      
      int size() -> 추가된 요소의 갯수(공간의 갯수 X)
      E get(int index) -> index 위치에 있는 요소 값을 반환
      E remove(int index) -> index 위치에 있는 요소 제거, 제거된 요소를 반환
      boolean isEmpty() -> 배열이 비어있는지 체크

      참고)
      (Generic -> 유동적인 자료형 -> 실행 될때)
    
    ArrayList 클래스
      java.util 패키지에서 불러와야 사용 가능 -> import

      ArrayList<E> 배열 이름 = new ArrayList<E>();
      ArrayList<E> 배열 이름 = new ArrayList<>();
      별도로 저장 공간을 설정하지 않아도 됨 -> 유동적으로 알아서 늘어나고 줄어든다.

07-4) 배열 응용 프로그램
  

